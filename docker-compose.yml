version: '2.0'
services:
  # To create container
  python-project:
    image: abc
    command: bash -c "django-admin startproject testing && find . -exec chmod 777 {} \;"
    volumes: [".:/usr/src/app"]
    networks: 
      admin:
        ipv4_address: 10.10.10.5

  # Dev ENV
  python-shell:
    image: abc
    command: bash
    stdin_open: true    # standard input enable
    tty: true           # terminal true
    depends_on: 
      - python-sql
    volumes: [".:/usr/src/app"]
    networks: 
      admin:
        ipv4_address: 10.10.10.2
    
  # MySQL Server Database
  python-sql:
    image: mysql
    volumes: ["./data:/var/lib/mysql"]
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: incridea
      MYSQL_USER: shashank
      MYSQL_PASSWORD: shashank
    networks: 
      admin:
        ipv4_address: 10.10.10.3

  # Prod Server
  python-server:
    image: abc
    build: .
    command: bash -c "cd testing && python manage.py makemigrations && gunicorn testing.wsgi:application --bind 0:8888"
    volumes: ['.:/usr/src/app']
    ports: ["8000:8888"]
    networks: 
      admin:
        ipv4_address: 10.10.10.4
    depends_on:     # Dependance service
      - python-sql

# Network do that docker service container can interact with each other
networks: 
  admin:
    driver: bridge  # network which are connected to the system will be directly connected to docker
    ipam:
      config:
        - subnet: 10.10.10.0/20
          gateway: 10.10.10.1
